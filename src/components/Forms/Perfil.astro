---
import { adminAuth, adminFirestore } from '../../firebase/server'; // Ajusta la ruta si es necesario

interface UserData {
  firstName?: string;
  email: string;
}

const sessionCookie = Astro.cookies.get('session')?.value;

if (!sessionCookie) {
  return Astro.redirect('/login');
}

let userId: string;
let userData: UserData = { email: '' };
let purchases: any[] = [];
let errorOccurred = false;

try {
  // Verificar la cookie de sesión
  const decodedClaims = await adminAuth.verifySessionCookie(sessionCookie, true);
  userId = decodedClaims.uid;

  // Obtener datos del usuario desde Firestore
  const userDoc = await adminFirestore.collection('users').doc(userId).get();
  if (userDoc.exists) {
    userData = userDoc.data() as UserData;
  } else {
    console.error('No se encontró el documento del usuario');
    userData = { email: decodedClaims.email };
  }

  // Obtener las compras del usuario
  const purchasesSnapshot = await adminFirestore
    .collection('orders')
    .where('userId', '==', userId)
    .orderBy('createdAt', 'desc')
    .get();

  const purchasePromises = purchasesSnapshot.docs.map(async (doc) => {
    const data = doc.data();
    let productName = data.productName;
    let storeName = data.storeName;

    // Si no tenemos el nombre del producto, lo obtenemos de la colección 'products'
    if (!productName) {
      const productDoc = await adminFirestore.collection('products').doc(data.productId).get();
      productName = productDoc.exists ? productDoc.data()?.name : 'Producto no disponible';
    }

    // Si no tenemos el nombre de la tienda, lo obtenemos de la colección 'sellers'
    if (!storeName) {
      const sellerDoc = await adminFirestore.collection('sellers').doc(data.sellerId).get();
      storeName = sellerDoc.exists ? sellerDoc.data()?.storeName : 'Tienda no disponible';
    }

    return {
      id: doc.id,
      ...data,
      productName,
      storeName,
      createdAt: data.createdAt ? data.createdAt.toDate() : null, // Manejar undefined
    };
  });

  purchases = await Promise.all(purchasePromises);

} catch (error) {
  console.error('Error al obtener los datos del usuario o las compras:', error);
  errorOccurred = true;
}
---
<html lang="es">
  <head>
    <meta charset="UTF-8">
    <title>Perfil de Usuario</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  </head>
  <body class="bg-gray-100 font-sans">
    <section class="max-w-4xl mx-auto p-6 bg-white mt-10 rounded-lg shadow-md">
      {errorOccurred ? (
        <>
          <h1 class="text-3xl font-bold mb-4">Ocurrió un error</h1>
          <p class="text-gray-700 mb-6">No pudimos cargar tu perfil. Por favor, inténtalo de nuevo más tarde.</p>
          <a href="/logout" class="text-blue-600 hover:underline">Cerrar sesión</a>
        </>
      ) : (
        <>
          <h1 class="text-3xl font-bold mb-4">¡Bienvenido, {userData.firstName ?? userData.email}!</h1>
          <p class="text-gray-700 mb-6">Esta es tu página de perfil. Aquí puedes ver tus compras y actualizar tu información.</p>

          <h2 class="text-2xl font-semibold mb-4">Mis Compras</h2>
          {purchases.length > 0 ? (
            <div class="overflow-x-auto">
              <table class="min-w-full bg-white">
                <thead>
                  <tr>
                    <th class="py-2 px-4 border-b">Order ID</th>
                    <th class="py-2 px-4 border-b">Producto</th>
                    <th class="py-2 px-4 border-b">Cantidad</th>
                    <th class="py-2 px-4 border-b">Precio Total</th>
                    <th class="py-2 px-4 border-b">PIN Secreto</th>
                    <th class="py-2 px-4 border-b">Estado</th>
                    <th class="py-2 px-4 border-b">Detalles</th> <!-- Nueva columna -->
                  </tr>
                </thead>
                <tbody>
                  {purchases.map(purchase => (
                    <tr class="text-center">
                      <td class="py-2 px-4 border-b">{purchase.orderId}</td>
                      <td class="py-2 px-4 border-b">{purchase.productName || 'No disponible'}</td>
                      <td class="py-2 px-4 border-b">{purchase.quantity}</td>
                      <td class="py-2 px-4 border-b">${purchase.total?.toLocaleString('es-ES') || '0.00'}</td>
                      <td class="py-2 px-4 border-b">
                        <span id={`pin-${purchase.id}`} class="hidden">{purchase.pin}</span>
                        <button onclick={`togglePIN(event, '${purchase.id}')`} class="text-blue-500 underline">Mostrar PIN</button>
                      </td>
                      <td class="py-2 px-4 border-b">{purchase.status}</td>
                      <td class="py-2 px-4 border-b">
                        <a href={`/purchase-details/${purchase.id}`} class="text-indigo-600 hover:text-indigo-900">Detalles del Pedido</a>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p class="text-gray-700">No has realizado compras aún.</p>
          )}

          <!-- Enlace para cerrar sesión -->
          <div class="mt-6">
            <a href="/logout" class="text-blue-600 hover:underline">Cerrar sesión</a>
          </div>
        </>
      )}
    </section>

    <!-- Bloque de Script Corregido con is:inline -->
    <script is:inline>
      function togglePIN(event, orderId) {
        const pinElement = document.getElementById(`pin-${orderId}`);
        const button = event.target;

        if (pinElement.classList.contains('hidden')) {
          pinElement.classList.remove('hidden');
          if (button instanceof HTMLButtonElement) {
            button.textContent = 'Ocultar PIN';
          }
        } else {
          pinElement.classList.add('hidden');
          if (button instanceof HTMLButtonElement) {
            button.textContent = 'Mostrar PIN';
          }
        }
      }
    </script>
  </body>
</html>
