---
// Importaciones necesarias
import { adminAuth, adminFirestore } from '../../firebase/server';

interface UserData {
  firstName?: string;
  email: string;
}

const sessionCookie = Astro.cookies.get('session')?.value;

if (!sessionCookie) {
  return Astro.redirect('/login');
}

let userId: string;
let userData: UserData = { email: '' };
let purchases: any[] = [];
let errorOccurred = false;
let supportCases: any[] = []; // <-- Nueva variable para los casos de soporte

try {
  // Verificar la cookie de sesión
  const decodedClaims = await adminAuth.verifySessionCookie(sessionCookie, true);
  userId = decodedClaims.uid;

  // Obtener datos del usuario desde Firestore
  const userDoc = await adminFirestore.collection('users').doc(userId).get();
  if (userDoc.exists) {
    userData = userDoc.data() as UserData;
  } else {
    console.error('No se encontró el documento del usuario');
    userData = { email: decodedClaims.email };
  }

  // Obtener las compras del usuario
  const purchasesSnapshot = await adminFirestore
    .collection('orders')
    .where('userId', '==', userId)
    .orderBy('createdAt', 'desc')
    .get();

  const purchasePromises = purchasesSnapshot.docs.map(async (doc) => {
    const data = doc.data();
    let productName = data.productName;
    let storeName = data.storeName;
    let numeroTelefonico = null;
    let hasReview = false; // Variable para verificar si ya hay reseña

    // Si no tenemos el nombre del producto, lo obtenemos de la colección 'products'
    if (!productName) {
      const productDoc = await adminFirestore.collection('products').doc(data.productId).get();
      productName = productDoc.exists ? productDoc.data()?.name : 'Producto no disponible';
    }

    // Si no tenemos el nombre de la tienda, lo obtenemos de la colección 'sellers'
    if (!storeName || !numeroTelefonico) {
      const sellerDoc = await adminFirestore.collection('sellers').doc(data.sellerId).get();
      storeName = sellerDoc.exists ? sellerDoc.data()?.storeName : 'Tienda no disponible';
      numeroTelefonico = sellerDoc.exists ? sellerDoc.data()?.numeroTelefonico : 'No disponible';
    }

    // Verificar si ya existe una reseña para esta compra
    if (data.status === 'Completado') {
      const reviewSnapshot = await adminFirestore
        .collection('reviews')
        .where('purchaseId', '==', doc.id)
        .limit(1)
        .get();
      hasReview = !reviewSnapshot.empty;
    }

    return {
      id: doc.id,
      ...data,
      productName,
      storeName,
      numeroTelefonico,
      createdAt: data.createdAt ? data.createdAt.toDate() : null,
      hasReview, // Agregar indicador de si ya existe una reseña
    };
  });

  purchases = await Promise.all(purchasePromises);

   // Obtener los casos de soporte del usuario
   const supportSnapshot = await adminFirestore
    .collection('support')
    .where('userId', '==', userId)
    .orderBy('createdAt', 'desc')
    .get();

  const supportPromises = supportSnapshot.docs.map(async (doc) => {
    const data = doc.data();
    const answersSnapshot = await doc.ref.collection('answer').orderBy('createdAt', 'asc').get();
    const answers = answersSnapshot.docs.map(answerDoc => {
      const answerData = answerDoc.data();
      return {
        id: answerDoc.id,
        message: answerData.message,
        createdAt: answerData.createdAt ? answerData.createdAt.toDate() : null,
      };
    });
    return {
      id: doc.id,
      ...data,
      createdAt: data.createdAt ? data.createdAt.toDate() : null,
      answers,
    };
  });

  supportCases = await Promise.all(supportPromises);

} catch (error) {
  console.error('Error al obtener los datos del usuario o las compras:', error);
  errorOccurred = true;
}

---
<html lang="es">
  <head>
    <meta charset="UTF-8">
    <title>Perfil de Usuario</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  </head>
  <body class="bg-gray-100 font-sans">
    <section class="max-w-6xl mx-auto p-6 bg-white mt-10 rounded-lg shadow-md">
      {errorOccurred ? (
        <>
          <h1 class="text-3xl font-bold mb-4">Ocurrió un error</h1>
          <p class="text-gray-700 mb-6">No pudimos cargar tu perfil. Por favor, inténtalo de nuevo más tarde.</p>
          <a href="/logout" class="text-blue-600 hover:underline">Cerrar sesión</a>
        </>
      ) : (
        <>
          <h1 class="text-3xl font-bold mb-4">¡Bienvenido/a, {userData.firstName ?? userData.email}!</h1>
          <p class="text-gray-700 mb-6">Esta es tu página de perfil. Aquí puedes ver tus compras y actualizar tu información.</p>

          <h2 class="text-2xl font-semibold mb-4">Mis Compras</h2>
          <p class="text-gray-700 mb-6">Presenta el Order ID en la tienda donde hiciste tu compra, luego muestra tu PIN secreto al vendedor para confirmar tu compra.</p>
          {purchases.length > 0 ? (
            <div class="overflow-x-auto">
              <table class="min-w-full bg-white">
                <thead>
                  <tr>
                    <th class="py-2 px-4 border-b">Order ID</th>
                    <th class="py-2 px-4 border-b">Producto</th>
                    <th class="py-2 px-4 border-b">Cantidad</th>
                    <th class="py-2 px-4 border-b">Precio Total</th>
                    <th class="py-2 px-4 border-b">PIN Secreto</th>
                    <th class="py-2 px-4 border-b">Estado</th>
                    <th class="py-2 px-4 border-b">Detalles</th>
                    <th class="py-2 px-4 border-b">Contacto Vendedor</th>
                    <th class="py-2 px-4 border-b">Reseña</th> <!-- Nueva columna -->
                  </tr>
                </thead>
                <tbody>
                  {purchases.map(purchase => (
                    <tr class="text-center">
                      <td class="py-2 px-4 border-b">{purchase.orderId}</td>
                      <td class="py-2 px-4 border-b">{purchase.productName || 'No disponible'}</td>
                      <td class="py-2 px-4 border-b">{purchase.quantity}</td>
                      <td class="py-2 px-4 border-b">${purchase.total?.toLocaleString('es-ES') || '0.00'}</td>
                      <td class="py-2 px-4 border-b">
                        <span id={`pin-${purchase.id}`} class="hidden">{purchase.pin}</span>
                        <button onclick={`togglePIN(event, '${purchase.id}')`} class="text-blue-500 underline">Mostrar PIN</button>
                      </td>
                      <td class="py-2 px-4 border-b">{purchase.status}</td>
                      <td class="py-2 px-4 border-b">
                        <a href={`/purchase-details/${purchase.id}`} class="text-indigo-600 hover:text-indigo-900">Detalles del Pedido</a>
                      </td>
                      <td class="py-2 px-4 border-b">
                        {purchase.numeroTelefonico ? (
                          <a href={`tel:${purchase.numeroTelefonico}`} class="text-green-600 hover:text-green-900">{purchase.numeroTelefonico}</a>
                        ) : (
                          'No disponible'
                        )}
                      </td>
                      <td class="py-2 px-4 border-b">
                        {purchase.status === 'Completado' ? (
                          purchase.hasReview ? (
                            'Reseña enviada'
                          ) : (
                            <a href={`/write-review/${purchase.id}`} class="text-blue-500 underline">Escribir Reseña</a>
                          )
                        ) : (
                          'N/A'
                        )}
                      </td> <!-- Nueva columna con opción de reseña -->
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p class="text-gray-700">No has realizado compras aún.</p>
          )}
                 <!-- Nueva Sección de Mis Casos -->
          <h2 class="text-2xl font-semibold mt-10 mb-4">Mis Casos</h2>
          {supportCases.length > 0 ? (
            <div class="space-y-6">
              {supportCases.map(supportCase => (
                <div class="p-4 border border-gray-300 rounded-lg">
                  <p><strong>Asunto:</strong> {supportCase.subject}</p>
                  {supportCase.orderNumber && <p><strong>Número de Orden:</strong> {supportCase.orderNumber}</p>}
                  {supportCase.sellerName && <p><strong>Nombre del Vendedor:</strong> {supportCase.sellerName}</p>}
                  <p><strong>Mensaje:</strong> {supportCase.message}</p>
                  <p><strong>Fecha de Creación:</strong> {supportCase.createdAt?.toLocaleString()}</p>

                  {supportCase.answers.length > 0 ? (
                    <div class="mt-4">
                      <h3 class="text-xl font-semibold">Respuestas del Administrador:</h3>
                      {supportCase.answers.map(answer => (
                        <div class="mt-2 p-2 border border-green-300 rounded-lg bg-green-50">
                          <p>{answer.message}</p>
                          <p class="text-sm text-gray-500">{answer.createdAt?.toLocaleString()}</p>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p class="mt-4 text-gray-500">Aún no hay respuestas del administrador.</p>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <p class="text-gray-700">No tienes casos de soporte.</p>
          )}
          <!-- Enlace para cerrar sesión -->
          <div class="mt-6">
            <a href="/logout" class="text-blue-600 hover:underline">Cerrar sesión</a>
          </div>
        </>
      )}
    </section>

    <!-- Bloque de Script -->
    <script>
      function togglePIN(event, orderId) {
        const pinElement = document.getElementById(`pin-${orderId}`);
        const button = event.target;

        if (pinElement.classList.contains('hidden')) {
          pinElement.classList.remove('hidden');
          button.textContent = 'Ocultar PIN';
        } else {
          pinElement.classList.add('hidden');
          button.textContent = 'Mostrar PIN';
        }
      }
    </script>
  </body>
</html>
