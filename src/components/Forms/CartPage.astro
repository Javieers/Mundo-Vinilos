---
import { adminAuth, adminFirestore } from '../../firebase/server';
import { getSellerInfo } from '../../firebase/server';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';

const sessionCookie = Astro.cookies.get('session')?.value;

let user = null;
let product = null;
let sellerInfo = null;

// Verificar la sesión del usuario
if (sessionCookie) {
  try {
    const decodedClaims = await adminAuth.verifySessionCookie(sessionCookie, true);
    user = decodedClaims;
  } catch (error) {
    console.error('Error al verificar la cookie de sesión:', error);
    // Puedes manejar el error o simplemente dejar 'user' como null
  }
}

// Obtener parámetros de la URL
const url = new URL(Astro.request.url);
const productId = url.searchParams.get('productId');
const sellerId = url.searchParams.get('sellerId');
const sellerName = url.searchParams.get('sellerName') || 'No disponible';
const price = parseFloat(url.searchParams.get('price') || '0');
const estadoVinilo = url.searchParams.get('estadoVinilo') || 'No especificado';
const estadoCaratula = url.searchParams.get('estadoCaratula') || 'No especificado';

try {
  // Obtener el producto desde Firestore
  const productDoc = await adminFirestore.collection('products').doc(productId).get();
  if (productDoc.exists) {
    product = { id: productDoc.id, ...productDoc.data() };
    // Obtener información del vendedor
    sellerInfo = await getSellerInfo(sellerId || '');
  } else {
    console.error('Producto no encontrado en Firestore');
    // Puedes manejar este caso mostrando un mensaje al usuario
  }
} catch (error) {
  console.error('Error al obtener el producto o la información del vendedor:', error);
  // Puedes manejar este error mostrando un mensaje al usuario
}

// Verificar si es preventa y si la fecha de salida aún no ha pasado
let isPreOrderActive = false;
let formattedReleaseDate = null;

if (product && product.isPreOrder && product.releaseDate) {
  const currentDate = new Date();
  const releaseDate = product.releaseDate.toDate(); // Convertir Timestamp a Date
  isPreOrderActive = releaseDate > currentDate;
  formattedReleaseDate = format(releaseDate, "dd 'de' MMMM 'de' yyyy", { locale: es });
}
---

<section class="p-6 flex justify-center items-center bg-gray-100 min-h-screen">
  <div class="bg-white p-8 rounded-lg shadow-lg w-full max-w-3xl">
    <h2 class="text-3xl font-bold text-center mb-6">Detalles de Compra</h2>

    <!-- Mensaje Informativo -->
    <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6" role="alert">
      <p class="font-bold">Importante</p>
      {isPreOrderActive ? (
        <p>Este es un producto en reserva. Al confirmar tu compra, podrás retirarlo a partir del {formattedReleaseDate} presentando tu número de orden.</p>
      ) : (
        <p>Al confirmar tu compra, debes acercarte a la tienda a recoger tu pedido con el número de orden.</p>
      )}
    </div>

    {product ? (
      <div class="flex flex-col lg:flex-row">
        <!-- Imagen del Producto -->
        <div class="lg:w-1/3 flex justify-center">
          <img src={product.imageUrl} alt={product.name} class="w-full h-auto object-contain rounded-md shadow-md" />
        </div>

        <!-- Información del Producto y Vendedor -->
        <div class="lg:w-2/3 lg:pl-6 mt-4 lg:mt-0">
          <!-- Mostrar "RESERVA" si es preventa activa -->
          {isPreOrderActive && (
            <div class="mb-2">
              <span class="bg-yellow-400 text-black px-2 py-1 rounded">RESERVA</span>
            </div>
          )}
          <p class="text-xl font-semibold">{product.name}</p>
          <p class="text-gray-600 mt-2"><strong>Tienda:</strong> {sellerInfo?.seller?.storeName || sellerName || 'No disponible'}</p>
          <p class="text-gray-600"><strong>Precio:</strong> ${price.toFixed(2)}</p>
          <p class="text-gray-600"><strong>Cantidad:</strong> 1</p>
          <p class="text-gray-600"><strong>Total:</strong> ${price.toFixed(2)}</p>

          <!-- Mostrar Estado del Vinilo y Estado de la Carátula -->
          <p class="text-gray-600"><strong>Estado del Vinilo:</strong> {estadoVinilo}</p>
          <p class="text-gray-600"><strong>Estado de la Carátula:</strong> {estadoCaratula}</p>

          <!-- Información Detallada del Vendedor -->
          {sellerInfo && sellerInfo.seller ? (
            <div class="mt-6 border-t pt-4">
              <h3 class="text-xl font-semibold mb-2">Información del Vendedor</h3>
              <div class="flex items-center mb-4">
                <img src={sellerInfo.seller.sellerImage} alt={sellerInfo.seller.storeName} class="w-16 h-16 rounded-full object-cover mr-4" />
                <div>
                  <p class="text-lg font-medium">{sellerInfo.seller.storeName}</p>
                  <p class="text-gray-600">{sellerInfo.seller.storeName}</p>
                </div>
              </div>
              <p class="text-gray-700"><strong>Dirección:</strong> {sellerInfo.seller.direccion || 'No disponible'}</p>
              <p class="text-gray-700"><strong>Email:</strong> {sellerInfo.seller.email || 'No disponible'}</p>
              <p class="text-gray-700"><strong>Número Telefónico:</strong> {sellerInfo.seller.numeroTelefonico || 'No disponible'}</p>
              <p class="text-gray-700"><strong>Redes Sociales:</strong> {sellerInfo.seller.redesSociales || 'No disponible'}</p>
              <div class="mt-2">
                <h4 class="font-semibold">Horario de Atención:</h4>
                <p class="text-gray-700"><strong>Desde:</strong> {sellerInfo.seller.horarioAtencion?.desde || 'No disponible'}</p>
                <p class="text-gray-700"><strong>Hasta:</strong> {sellerInfo.seller.horarioAtencion?.hasta || 'No disponible'}</p>
              </div>
              <p class="text-gray-500 text-sm mt-2"><strong>Última Actualización:</strong> {sellerInfo.seller.updatedAt ? format(sellerInfo.seller.updatedAt, 'dd de MMMM de yyyy, h:mm:ss aaaa', { locale: es }) : 'No disponible'}</p>
            </div>
          ) : (
            <p class="text-red-600 mt-4">Información del vendedor no disponible.</p>
          )}

          <!-- Instrucciones de Retiro -->
          <div class="mt-6 bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4">
            <p class="font-bold">Instrucciones para Retirar tu Producto</p>
            {isPreOrderActive ? (
              <p>Este producto estará disponible para retiro a partir del {formattedReleaseDate}. Por favor, acércate al local con tu número de orden desde esa fecha en adelante.</p>
            ) : (
              <p>Debes acercarte con el número de orden al local en los horarios de atención indicados. ¡Gracias por tu compra!</p>
            )}
          </div>

          <!-- Mostrar mensaje o botón según el estado de autenticación -->
          <div class="mt-6">
            {user ? (
              <!-- Formulario de Compra -->
              <form id="purchaseForm">
                <!-- Campos ocultos -->
                <input type="hidden" name="productId" value={productId} />
                <input type="hidden" name="sellerId" value={sellerId} />
                <input type="hidden" name="price" value={price} />
                <input type="hidden" name="quantity" value="1" />
                <input type="hidden" name="estadoVinilo" value={estadoVinilo} />
                <input type="hidden" name="estadoCaratula" value={estadoCaratula} />

                <!-- Botón de Comprar -->
                <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                  Confirmar Compra
                </button>
              </form>
            ) : (
              <!-- Mensaje de Iniciar Sesión -->
              <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4">
                <p class="font-bold">Debes iniciar sesión para realizar la compra.</p>
                <p>
                  Por favor, <a href="/login" class="text-blue-600 underline">inicia sesión</a> o <a href="/register" class="text-blue-600 underline">regístrate</a> para continuar.
                </p>
              </div>
            )}
          </div>

        </div>
      </div>
    ) : (
      <p class="text-red-600 font-semibold text-center">Producto no encontrado.</p>
    )}
  </div>
</section>

<!-- Script del lado del cliente -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const purchaseForm = document.getElementById('purchaseForm');

    if (purchaseForm) {
      purchaseForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        const productIdInput = document.querySelector('input[name="productId"]');
        const sellerIdInput = document.querySelector('input[name="sellerId"]');
        const priceInput = document.querySelector('input[name="price"]');
        const quantityInput = document.querySelector('input[name="quantity"]');
        const estadoViniloInput = document.querySelector('input[name="estadoVinilo"]');
        const estadoCaratulaInput = document.querySelector('input[name="estadoCaratula"]');

        if (
          productIdInput instanceof HTMLInputElement &&
          sellerIdInput instanceof HTMLInputElement &&
          priceInput instanceof HTMLInputElement &&
          quantityInput instanceof HTMLInputElement &&
          estadoViniloInput instanceof HTMLInputElement &&
          estadoCaratulaInput instanceof HTMLInputElement
        ) {
          const productId = productIdInput.value;
          const sellerId = sellerIdInput.value;
          const price = parseFloat(priceInput.value);
          const quantity = parseInt(quantityInput.value, 10);
          const estadoViniloValue = estadoViniloInput.value;
          const estadoCaratulaValue = estadoCaratulaInput.value;

          // **Agregar logs para depuración**
          console.log('Product ID:', productId);
          console.log('Seller ID:', sellerId);
          console.log('Price:', price);
          console.log('Quantity:', quantity);
          console.log('Estado Vinilo:', estadoViniloValue);
          console.log('Estado Caratula:', estadoCaratulaValue);

          // Validación básica
          if (!productId || isNaN(price) || isNaN(quantity)) {
            alert('Por favor, completa todos los campos correctamente.');
            return;
          }

          try {
            const response = await fetch('/api/purchase', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                productId,
                sellerId,
                price,
                quantity,
                estadoVinilo: estadoViniloValue,
                estadoCaratula: estadoCaratulaValue,
              }),
            });

            const result = await response.json();

            if (response.ok) {
              // Redirigir a la página de detalles de la compra
              window.location.href = `/purchase-details/${result.orderId}`;
            } else {
              alert('Error: ' + result.message);
            }
          } catch (error) {
            console.error('Error al realizar la compra:', error);
            alert('Error al realizar la compra');
          }
        } else {
          alert('Error al obtener los datos del formulario.');
        }
      });
    }
  });
</script>
