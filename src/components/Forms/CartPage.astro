---
import { adminAuth, adminFirestore } from '../../firebase/server';
import { getSellerInfo } from '../../firebase/server';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';

const sessionCookie = Astro.cookies.get('session')?.value;

let user = null;

if (sessionCookie) {
  try {
    const decodedClaims = await adminAuth.verifySessionCookie(sessionCookie, true);
    user = decodedClaims;
  } catch (error) {
    console.error('Error al verificar la cookie de sesión:', error);
  }
}

const url = new URL(Astro.request.url);
const productId = url.searchParams.get('productId');
const sellerId = url.searchParams.get('sellerId');
const storeName = url.searchParams.get('storeName'); // Obtener storeName de los parámetros
const price = parseFloat(url.searchParams.get('price') || '0');

let product = null;
let sellerInfo = null;

// Obtener el producto desde Firestore
try {
  const productDoc = await adminFirestore.collection('products').doc(productId).get();
  if (productDoc.exists) {
    product = { id: productDoc.id, ...productDoc.data() };
    // Obtener información del vendedor
    sellerInfo = await getSellerInfo(sellerId || '');
  } else {
    console.error('Producto no encontrado en Firestore');
  }
} catch (error) {
  console.error('Error al obtener el producto o la información del vendedor:', error);
}

// Verificar si es preventa y si la fecha de salida aún no ha pasado
let isPreOrderActive = false;
let formattedReleaseDate = null;

if (product && product.isPreOrder && product.releaseDate) {
  const currentDate = new Date();
  const releaseDate = product.releaseDate.toDate(); // Convertir Timestamp a Date
  isPreOrderActive = releaseDate > currentDate;
  formattedReleaseDate = format(releaseDate, "dd 'de' MMMM 'de' yyyy", { locale: es });
}
---
<section class="p-6 flex justify-center items-center bg-gray-100 min-h-screen">
  <div class="bg-white p-8 rounded-lg shadow-lg w-full max-w-3xl">
    <h2 class="text-3xl font-bold text-center mb-6">Detalles de Compra</h2>

    <!-- Mensaje Informativo -->
    <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6" role="alert">
      <p class="font-bold">Importante</p>
      {isPreOrderActive ? (
        <p>Este es un producto en reserva. Al confirmar tu compra, podrás retirarlo a partir del {formattedReleaseDate} presentando tu número de orden.</p>
      ) : (
        <p>Al confirmar tu compra, debes acercarte a la tienda a recoger tu pedido con el número de orden.</p>
      )}
    </div>

    {product ? (
      <div class="flex flex-col lg:flex-row">
        <!-- Imagen del Producto -->
        <div class="lg:w-1/3 flex justify-center">
          <img src={product.imageUrl} alt={product.name} class="w-full h-auto object-contain rounded-md shadow-md" />
        </div>

        <!-- Información del Producto y Vendedor -->
        <div class="lg:w-2/3 lg:pl-6 mt-4 lg:mt-0">
          <!-- Mostrar "RESERVA" si es preventa activa -->
          {isPreOrderActive && (
            <div class="mb-2">
              <span class="bg-yellow-400 text-black px-2 py-1 rounded">RESERVA</span>
            </div>
          )}
          <p class="text-xl font-semibold">{product.name}</p>
          <p class="text-gray-600 mt-2"><strong>Tienda:</strong> {sellerInfo?.seller?.storeName || storeName || 'No disponible'}</p>
          <p class="text-gray-600"><strong>Precio:</strong> ${price.toFixed(2)}</p>
          <p class="text-gray-600"><strong>Cantidad:</strong> 1</p>
          <p class="text-gray-600"><strong>Total:</strong> ${price.toFixed(2)}</p>

          <!-- Información Detallada del Vendedor -->
          {sellerInfo && sellerInfo.seller ? (
            <div class="mt-6 border-t pt-4">
              <h3 class="text-xl font-semibold mb-2">Información del Vendedor</h3>
              <div class="flex items-center mb-4">
                <img src={sellerInfo.seller.sellerImage} alt={sellerInfo.seller.storeName} class="w-16 h-16 rounded-full object-cover mr-4" />
                <div>
                  <p class="text-lg font-medium">{sellerInfo.seller.storeName}</p>
                  <p class="text-gray-600">{sellerInfo.seller.storeName}</p>
                </div>
              </div>
              <p class="text-gray-700"><strong>Dirección:</strong> {sellerInfo.seller.direccion || 'No disponible'}</p>
              <p class="text-gray-700"><strong>Email:</strong> {sellerInfo.seller.email || 'No disponible'}</p>
              <p class="text-gray-700"><strong>Número Telefónico:</strong> {sellerInfo.seller.numeroTelefonico || 'No disponible'}</p>
              <p class="text-gray-700"><strong>Redes Sociales:</strong> {sellerInfo.seller.redesSociales || 'No disponible'}</p>
              <div class="mt-2">
                <h4 class="font-semibold">Horario de Atención:</h4>
                <p class="text-gray-700"><strong>Desde:</strong> {sellerInfo.seller.horarioAtencion?.desde || 'No disponible'}</p>
                <p class="text-gray-700"><strong>Hasta:</strong> {sellerInfo.seller.horarioAtencion?.hasta || 'No disponible'}</p>
              </div>
              <p class="text-gray-500 text-sm mt-2"><strong>Última Actualización:</strong> {sellerInfo.seller.updatedAt ? format(sellerInfo.seller.updatedAt, 'dd de MMMM yyyy, h:mm:ss a', { locale: es }) : 'No disponible'}</p>
            </div>
          ) : (
            <p class="text-red-600 mt-4">Información del vendedor no disponible.</p>
          )}
        </div>
      </div>
    ) : (
      <p class="text-red-600 font-semibold text-center">Producto no encontrado.</p>
    )}

    {user ? (
      // Si el usuario está autenticado, mostramos el botón "Confirmar Compra"
      <form id="purchaseForm" class="mt-8">
        <input type="hidden" name="productId" value={productId} />
        <input type="hidden" name="sellerId" value={sellerId} />
        <input type="hidden" name="price" value={price} />
        <input type="hidden" name="quantity" value="1" />
        <button type="submit" class="w-full bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition duration-200">
          Confirmar Compra
        </button>
      </form>
    ) : (
      // Si el usuario no está autenticado, mostramos un mensaje y un enlace al login
      <div class="mt-8 text-center">
        <p class="text-red-600 font-semibold">Debes iniciar sesión para realizar la compra.</p>
        <a href="/login" class="mt-2 inline-block bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition duration-200">Iniciar sesión</a>
      </div>
    )}
  </div>
</section>

<script>
  document.getElementById('purchaseForm')?.addEventListener('submit', async (event) => {
    event.preventDefault();

    const productIdInput = document.querySelector('input[name="productId"]');
    const sellerIdInput = document.querySelector('input[name="sellerId"]');
    const priceInput = document.querySelector('input[name="price"]');
    const quantityInput = document.querySelector('input[name="quantity"]');

    if (
      productIdInput instanceof HTMLInputElement &&
      sellerIdInput instanceof HTMLInputElement &&
      priceInput instanceof HTMLInputElement &&
      quantityInput instanceof HTMLInputElement
    ) {
      const productId = productIdInput.value;
      const sellerId = sellerIdInput.value;
      const price = parseFloat(priceInput.value);
      const quantity = parseInt(quantityInput.value, 10);

      if (isNaN(price) || isNaN(quantity)) {
        alert('El precio y la cantidad deben ser valores numéricos válidos.');
        return;
      }

      try {
        const response = await fetch('/api/purchase', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            productId,
            sellerId,
            price,
            quantity,
          }),
        });

        const result = await response.json();

        if (response.ok) {
          // Redirigir a la página de detalles de la compra
          window.location.href = `/purchase-details/${result.orderId}`;
        } else {
          alert('Error: ' + result.message);
        }
      } catch (error) {
        console.error('Error al realizar la compra:', error);
        alert('Error al realizar la compra');
      }
    } else {
      alert('Error al obtener los datos del formulario.');
    }
  });
</script>
