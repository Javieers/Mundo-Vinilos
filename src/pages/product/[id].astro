---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getProducts, getSellerProductInfo } from '../../firebase/server';
import Cart from '../../cart/Cart.astro'; 

const { id } = Astro.params;
const products = await getProducts();
const product = products.find(p => p.id === id);
const sellers = await getSellerProductInfo(id); // Obtenemos la información de vendedores

if (!product) {
  throw new Error('Producto no encontrado');
}

// Inicializar el carrito y la variable para controlar la visualización del carrito
let cart = []; // Inicializamos cart
let showCartModal = false; // Inicializamos showCartModal

// Función para agregar al carrito
const addToCart = (sellerData) => {
  const existingItem = cart.find(item => item.productId === sellerData.productId && item.sellerId === sellerData.sellerId);
  
  if (existingItem) {
    existingItem.quantity += 1; // Incrementar la cantidad si ya existe
  } else {
    cart.push({ ...sellerData, quantity: 1 }); // Agregar el vendedor y el producto al carrito
  }
  updateCartDisplay(); // Actualizar la visualización del carrito
};

// Función para mostrar el carrito
const showCart = () => {
  showCartModal = true; // Mostrar carrito
};

// Función para cerrar el carrito
const closeCart = () => {
  showCartModal = false; // Cerrar carrito
};

// Función para actualizar la visualización del carrito
const updateCartDisplay = () => {
  const cartCount = document.getElementById('cartCount') as HTMLElement; // Aseguramos el tipo
  if (cartCount) {
    cartCount.innerText = cart.length.toString(); // Convertimos a cadena
  }
};
---

<BaseLayout>
  <section>
    <div class="mx-auto w-full lg:px-24 max-w-7xl md:px-12 items-center px-8 py-24">
      <div class="bg-white p-6 rounded-lg shadow-lg">
        <img src={product.imageUrl} alt={product.name} class="w-full h-auto max-h-96 object-contain rounded-md" />
        <h3 class="mt-4 text-lg font-semibold">{product.name}</h3>
        <p class="mt-2 text-gray-600">{product.description}</p>
        <p class="mt-2 text-gray-800 font-bold">${product.price}</p>
        <p class="mt-2 text-gray-600">Stock: {product.stock}</p>
      </div>

      <div class="mt-12">
        <h3 class="text-2xl font-semibold">Precios por vendedor</h3>
        <ul class="mt-4">
          {sellers.length > 0 ? (
            sellers.map(seller => (
              <li class="border-b py-4" id={`seller-${seller.sellerId}`}>
                <a href={`/seller/${seller.sellerId}`} class="text-blue-600 underline">{seller.sellerName}</a>
                - ${seller.price} {seller.stock === 0 ? '(Agotado)' : `(Stock: ${seller.stock})`}
                
                {/* Botón para agregar al carrito */}
                <button 
                  class="ml-4 bg-blue-600 text-white px-3 py-1 rounded"
                  id={`buy-${seller.sellerId}`}
                  data-product-id={product.id}
                >
                  Comprar
                </button>
              </li>
            ))
          ) : (
            <p class="text-gray-500">No hay vendedores disponibles para este producto.</p>
          )}
        </ul>
      </div>
    </div>

    {/* Icono del carrito */}
    <div class="fixed bottom-4 right-4">
      <button 
        id="showCartButton" 
        class="bg-blue-500 text-white rounded-full p-4 flex items-center justify-center"
      >
        🛒 <span id="cartCount" class="ml-2 text-lg">0</span>
      </button>
    </div>

    {/* Modal del carrito */}
    {showCartModal && <Cart cart={cart} closeCart={closeCart} />}
  </section>

  <script>
    // Inicializamos el carrito y la variable para controlar la visualización del carrito
    let cart = []; // Aseguramos que 'cart' esté definido
    let showCartModal = false; // Aseguramos que 'showCartModal' esté definido

    // Funciones de gestión del carrito y eventos
    const addToCart = (sellerData) => {
      const existingItem = cart.find(item => item.productId === sellerData.productId && item.sellerId === sellerData.sellerId);
      
      if (existingItem) {
        existingItem.quantity += 1; // Incrementar la cantidad si ya existe
      } else {
        cart.push({ ...sellerData, quantity: 1 }); // Agregar el vendedor y el producto al carrito
      }
      updateCartDisplay(); // Actualizar la visualización del carrito
    };

    const updateCartDisplay = () => {
      const cartCount = document.getElementById('cartCount'); // Aseguramos el tipo
      if (cartCount) {
        cartCount.innerText = cart.length.toString(); // Convertimos a cadena
      }
    };

    // Manejo de eventos para los botones de compra
    document.querySelectorAll('button[id^="buy-"]').forEach(button => {
      button.addEventListener('click', (event) => {
        const sellerId = (event.target as HTMLButtonElement).parentElement.id.split('-')[1]; // Obtener el ID del vendedor
        const sellerElement = (event.target as HTMLButtonElement).parentElement; // Obtener el nodo padre del vendedor
        const sellerName = sellerElement.querySelector('a').innerText; // Obtener el nombre del vendedor
        const price = parseFloat(sellerElement.innerText.split('$')[1].split(' ')[0]); // Obtener el precio
        
        const productId = (event.target as HTMLButtonElement).dataset.productId; // Obtener el ID del producto desde el dataset
        
        const sellerData = {
          sellerId: sellerId,
          sellerName: sellerName,
          price: price,
          productId: productId, // Usar el ID del producto obtenido del dataset
          quantity: 1
        };
        addToCart(sellerData); // Agregar al carrito
      });
    });

    // Agregar evento al botón de mostrar carrito
    const showCartButton = document.getElementById('showCartButton');
    showCartButton.addEventListener('click', () => {
      showCartModal = !showCartModal; // Alternar la visualización del carrito
      const cartModal = document.getElementById('cartModal'); // Obtener el modal del carrito
      if (showCartModal) {
        cartModal.style.display = 'block'; // Mostrar el carrito
      } else {
        cartModal.style.display = 'none'; // Ocultar el carrito
      }
    });
  </script>
</BaseLayout>
