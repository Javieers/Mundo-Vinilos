---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getProductById, getSellerProductInfo, adminFirestore } from '../../firebase/server'; // Asegúrate de importar adminFirestore
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import Star from '../../components/Star.astro'; // Importar el componente Star

const { id } = Astro.params;

// Obtener el producto específico por su ID
const product = await getProductById(id);

if (!product) {
  throw new Error('Producto no encontrado');
}

// Obtener información de los vendedores que ofrecen este producto
let sellers = await getSellerProductInfo(id);

// Obtener los sellerIds
const sellerIds = sellers.map(seller => seller.sellerId);

// Firestore permite un máximo de 10 elementos en una consulta 'in'
if (sellerIds.length > 10) {
  // Necesitarías dividir las consultas o implementar otra estrategia
  throw new Error('Demasiados vendedores para calcular las calificaciones promedio.');
}

// Obtener todas las reseñas para estos sellerIds
let reviewsSnapshot = await adminFirestore.collection('reviews').where('sellerId', 'in', sellerIds).get();

// Crear un mapa para almacenar las sumas y conteos de ratings
const ratingMap = {};

// Procesar las reseñas
if (!reviewsSnapshot.empty) {
  reviewsSnapshot.forEach(doc => {
    const data = doc.data();
    const sellerId = data.sellerId;
    const rating = data.rating;

    if (ratingMap[sellerId]) {
      ratingMap[sellerId].sum += rating;
      ratingMap[sellerId].count += 1;
    } else {
      ratingMap[sellerId] = { sum: rating, count: 1 };
    }
  });
}

// Agregar averageRating a cada vendedor
sellers = sellers.map(seller => {
  const { sellerId } = seller;
  if (ratingMap[sellerId]) {
    const average = parseFloat((ratingMap[sellerId].sum / ratingMap[sellerId].count).toFixed(2));
    return { ...seller, averageRating: average };
  } else {
    return { ...seller, averageRating: null }; // No hay reseñas
  }
});

// Verificar si es preventa y si la fecha de salida aún no ha pasado
let isPreOrderActive = false;
let formattedReleaseDate = '';
if (product.isPreOrder && product.releaseDate) {
  const currentDate = new Date();
  const releaseDate = product.releaseDate.toDate(); // Convertir Timestamp a Date
  isPreOrderActive = releaseDate > currentDate;
  formattedReleaseDate = format(releaseDate, "dd 'de' MMMM 'de' yyyy", { locale: es });
}
---
<BaseLayout>
  <section>
    <div class="mx-auto w-full lg:px-24 max-w-7xl md:px-12 px-8 py-24">
      <!-- Contenedor principal del producto -->
      <div class="bg-white p-6 rounded-lg shadow-lg flex flex-col md:flex-row">
        <!-- Imagen del Producto -->
        <div class="md:w-1/2 flex-shrink-0">
          <img src={product.imageUrl} alt={product.name} class="w-full h-auto object-contain rounded-md" />
        </div>

        <!-- Información del Producto -->
        <div class="md:w-1/2 md:pl-6 mt-6 md:mt-0">
          <!-- Mostrar "RESERVA" si es preventa activa -->
          {isPreOrderActive && (
            <div class="mb-2">
              <span class="bg-yellow-400 text-black px-2 py-1 rounded">RESERVA</span>
            </div>
          )}
          <h1 class="text-3xl font-bold">{product.name}</h1>
          <p class="text-gray-700 mt-2"><strong>Artista:</strong> {product.artistName}</p>
          <p class="text-gray-700"><strong>Álbum:</strong> {product.albumName}</p>
          {product.genres && product.genres.length > 0 && (
            <p class="text-gray-700"><strong>Géneros:</strong> {product.genres.join(', ')}</p>
          )}
          {/* Eliminar la referencia a product.price si no existe */}
          {/* {product.price !== undefined && typeof product.price === 'number' ? (
            <p class="text-gray-700 mt-2">Precio: ${product.price.toLocaleString('es-ES')}</p>
          ) : (
            <p class="text-gray-700 mt-2">Precio: No disponible</p>
          )} */}
          {product.additionalInfo && (
            <div class="mt-4">
              <h2 class="text-xl font-semibold">Información Adicional:</h2>
              <p class="text-gray-700">{product.additionalInfo}</p>
            </div>
          )}
          {product.tracklist && (
            <div class="mt-4">
              <h2 class="text-xl font-semibold">Tracklist:</h2>
              <p class="text-gray-700 whitespace-pre-line">{product.tracklist}</p>
            </div>
          )}

          {/* Mensaje de reserva si es preventa activa */}
          {isPreOrderActive && (
            <div class="mt-4">
              <p class="text-red-600 font-semibold">Este producto estará disponible a partir del {formattedReleaseDate}. Puedes reservarlo ahora.</p>
            </div>
          )}
        </div>
      </div>

      <!-- Precios por Vendedor -->
      <div class="mt-12">
        <h2 class="text-2xl font-semibold">Precios por Vendedor</h2>
        <ul class="mt-4">
          {sellers.length > 0 ? (
            sellers.map(seller => (
              <li class="border-b py-4 flex items-center justify-between" id={`seller-${seller.sellerId}`}>
                <div>
                  <a href={`/seller/${seller.sellerId}`} class="text-blue-600 underline flex items-center">
                    {seller.sellerName}
                    {/* Mostrar calificación promedio si existe */}
                    {seller.averageRating !== null && (
                      <span class="flex items-center ml-2 text-sm text-yellow-500">
                        {/* Estrella */}
                        <Star filled={true} />
                        {/* Nota */}
                        <span class="ml-1">{seller.averageRating}/10</span>
                      </span>
                    )}
                  </a>
                  {/* Mostrar el precio específico del vendedor */}
                  {seller.price !== undefined && typeof seller.price === 'number' ? (
                    <p class="text-gray-700 mt-2">Precio: ${seller.price.toLocaleString('es-ES')}</p>
                  ) : (
                    <p class="text-gray-700 mt-2">Precio: No disponible</p>
                  )}
                  {/* Mostrar el stock específico del vendedor */}
                  {seller.stock !== undefined && typeof seller.stock === 'number' ? (
                    <p class="text-gray-700">
                      Stock: {seller.stock > 0 ? seller.stock : <span class="text-red-500">Agotado</span>}
                    </p>
                  ) : (
                    <p class="text-gray-700">Stock: No disponible</p>
                  )}
                  <span class="text-sm text-gray-600">Estado del Vinilo: {seller.estadoVinilo}</span>
                  <br />
                  <span class="text-sm text-gray-600">Estado de la Carátula: {seller.estadoCaratula}</span>
                </div>
                {/* Enlace para comprar que lleva a CartPage con parámetros */}
                {seller.stock > 0 && (
                  <a 
                    class="bg-blue-600 text-white px-3 py-1 rounded"
                    href={`/cartpage?productId=${product.id}&sellerId=${seller.sellerId}&sellerName=${encodeURIComponent(seller.sellerName)}&price=${seller.price}&estadoVinilo=${encodeURIComponent(seller.estadoVinilo)}&estadoCaratula=${encodeURIComponent(seller.estadoCaratula)}`}
                  >
                    {isPreOrderActive ? 'Reservar' : 'Comprar'}
                  </a>
                )}
              </li>
            ))
          ) : (
            <p class="text-gray-500">No hay vendedores disponibles para este producto.</p>
          )}
        </ul>
      </div>
    </div>
  </section>
</BaseLayout>
