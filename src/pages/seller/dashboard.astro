---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { adminAuth, adminFirestore } from '../../firebase/server';
import { Timestamp } from 'firebase-admin/firestore';

// Definir interfaces para tipar correctamente los datos
interface Product {
  id: string;
  name: string;
  price: number;
  stock: number;
  artistName?: string;
  description?: string;
  imageUrl?: string;
}

interface Order {
  id: string;
  orderId: string;
  productId: string;
  userId: string;
  quantity: number;
  createdAt: Timestamp;
  status: string;
  price: number;
  total: number;
  productName?: string;
  buyerName?: string;
}

const sessionCookie = Astro.cookies.get('session')?.value;

if (!sessionCookie) {
  return Astro.redirect('/login');
}

let user = null;
let sellerData = null;
let products: Product[] = [];
let orders: Order[] = [];
let productsPage = 1;
let ordersPage = 1;
const PRODUCTS_PER_PAGE = 10;
const ORDERS_PER_PAGE = 10;

try {
  const decodedClaims = await adminAuth.verifySessionCookie(sessionCookie, true);

  if (decodedClaims.seller) {
    user = decodedClaims;
    const sellerId = user.uid;

    // Obtener datos del vendedor
    const sellerDoc = await adminFirestore.collection('sellers').doc(sellerId).get();

    if (sellerDoc.exists) {
      sellerData = sellerDoc.data();
    } else {
      // Si el vendedor no tiene documento, crearlo
      await adminFirestore.collection('sellers').doc(sellerId).set({
        sellerId,
        sellerName: user.email, // Puedes pedirle que actualice su perfil más adelante
      });
      sellerData = { sellerId, sellerName: user.email };
    }

    // Parámetros de paginación
    const url = new URL(Astro.request.url);
    productsPage = parseInt(url.searchParams.get('productsPage') || '1', 10);
    ordersPage = parseInt(url.searchParams.get('ordersPage') || '1', 10);

    // Obtener productos del vendedor con paginación
    let productsQuery = adminFirestore
      .collection('sellers')
      .doc(sellerId)
      .collection('products')
      .orderBy('productId')
      .limit(PRODUCTS_PER_PAGE);

    if (productsPage > 1) {
      const previousProductsSnapshot = await adminFirestore
        .collection('sellers')
        .doc(sellerId)
        .collection('products')
        .orderBy('productId')
        .limit((productsPage - 1) * PRODUCTS_PER_PAGE)
        .get();

      const lastProduct = previousProductsSnapshot.docs[previousProductsSnapshot.docs.length - 1];
      if (lastProduct) {
        productsQuery = productsQuery.startAfter(lastProduct);
      }
    }

    const sellerProductsSnapshot = await productsQuery.get();

    // Definir interfaz para los datos de los productos del vendedor
    interface SellerProductData {
      productId: string;
      price: number;
      stock: number;
      // Otros campos si existen
    }

    // Mapear los productos del vendedor
    const sellerProducts = sellerProductsSnapshot.docs.map(doc => {
      const data = doc.data() as SellerProductData;
      return { id: doc.id, ...data };
    });

    // Obtener la información completa de cada producto desde la colección principal "products"
    const productPromises = sellerProducts.map(async (sellerProduct) => {
      const productDoc = await adminFirestore.collection('products').doc(sellerProduct.productId).get();
      if (productDoc.exists) {
        const productData = productDoc.data();
        return {
          id: sellerProduct.productId,
          name: productData?.name ?? 'Sin nombre',
          price: sellerProduct.price ?? 0,
          stock: sellerProduct.stock ?? 0,
          artistName: productData?.artistName ?? 'Artista desconocido',
          description: productData?.description ?? 'Sin descripción',
          imageUrl: productData?.imageUrl ?? '/default-image.png',
        } as Product;
      } else {
        return {
          id: sellerProduct.productId,
          name: 'Producto no disponible',
          price: sellerProduct.price ?? 0,
          stock: sellerProduct.stock ?? 0,
        } as Product;
      }
    });

    products = await Promise.all(productPromises);

    // Obtener órdenes del vendedor con paginación
    let ordersQuery = adminFirestore
      .collection('orders')
      .where('sellerId', '==', sellerId)
      .orderBy('createdAt', 'desc')
      .limit(ORDERS_PER_PAGE);

    if (ordersPage > 1) {
      const previousOrdersSnapshot = await adminFirestore
        .collection('orders')
        .where('sellerId', '==', sellerId)
        .orderBy('createdAt', 'desc')
        .limit((ordersPage - 1) * ORDERS_PER_PAGE)
        .get();

      const lastOrder = previousOrdersSnapshot.docs[previousOrdersSnapshot.docs.length - 1];
      if (lastOrder) {
        ordersQuery = ordersQuery.startAfter(lastOrder);
      }
    }

    const ordersSnapshot = await ordersQuery.get();
    const ordersData = ordersSnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        id: doc.id,
        orderId: data.orderId,
        productId: data.productId,
        userId: data.userId,
        quantity: data.quantity,
        createdAt: data.createdAt,
        status: data.status,
        price: data.price,
        total: data.total,
      } as Order;
    });

    // Enriquecer cada orden con el nombre del producto y del comprador
    const orderPromises = ordersData.map(async (order) => {
      const productId = order.productId;
      const userId = order.userId;

      // Obtener el nombre del producto
      const productDoc = await adminFirestore.collection('products').doc(productId).get();
      const productName = productDoc.exists ? productDoc.data()?.name : 'Producto no disponible';

      // Obtener el nombre del comprador
      const userDoc = await adminFirestore.collection('users').doc(userId).get();
      const buyerName = userDoc.exists ? (userDoc.data()?.firstName ? userDoc.data()?.firstName : userDoc.data()?.email) : 'Usuario no disponible';

      return {
        ...order,
        productName,
        buyerName,
      };
    });

    orders = await Promise.all(orderPromises);

  } else {
    return Astro.redirect('/no-autorizado');
  }
} catch (error) {
  console.error('Error al verificar la sesión:', error);
  return Astro.redirect('/login');
}
---

<BaseLayout>
  <!-- Interfaz del panel de control del vendedor -->
  <section class="max-w-7xl mx-auto p-6 bg-white mt-10 rounded-lg shadow-md">
    <h2 class="text-3xl font-bold mb-6">Panel de Vendedor</h2>
    <p class="text-gray-700 mb-8">Bienvenido, <span class="font-semibold">{sellerData.sellerName}</span></p>

    <!-- Barra de búsqueda por Order ID -->
    <div class="mt-4 flex justify-center">
      <input 
        type="text" 
        id="search-order-id"
        placeholder="Buscar Order ID..."
        class="px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 text-lg"
      />
      <button id="search-btn" class="ml-2 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none">Buscar</button>
    </div>

    <!-- Sección para gestionar productos -->
    <h3 class="text-2xl font-semibold mt-10 mb-4">Mis Productos</h3>
    <table class="min-w-full divide-y divide-gray-200 mb-8">
      <!-- Encabezado de la tabla -->
      <thead>
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precio</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
          <th class="px-6 py-3"></th>
        </tr>
      </thead>
      <!-- Cuerpo de la tabla -->
      <tbody class="bg-white divide-y divide-gray-200">
        {products.map(product => (
          <tr>
            <td class="px-6 py-4">{product.name}</td>
            <td class="px-6 py-4">${product.price}</td>
            <td class="px-6 py-4">{product.stock}</td>
            <td class="px-6 py-4 text-right">
              <a href={`/seller/edit-product/${product.id}`} class="text-blue-600 hover:text-blue-900">Editar</a>
            </td>
          </tr>
        ))}
      </tbody>
    </table>

    <!-- Enlaces de paginación para productos -->
    <div class="mt-4 flex justify-between">
      {productsPage > 1 ? (
        <a href={`/seller/dashboard?productsPage=${productsPage - 1}&ordersPage=${ordersPage}`} class="text-blue-600 hover:text-blue-900">Anterior</a>
      ) : <span></span>}
      {products.length === PRODUCTS_PER_PAGE ? (
        <a href={`/seller/dashboard?productsPage=${productsPage + 1}&ordersPage=${ordersPage}`} class="text-blue-600 hover:text-blue-900">Siguiente</a>
      ) : <span></span>}
    </div>

    <!-- Enlace para agregar un nuevo producto -->
    <div class="mt-6 flex space-x-4">
      <a href="/seller/add-new-product" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
        Agregar Nuevo Producto
      </a>
      <a href="/assignproduct" class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600">
        Asignar Precio y Stock a Producto Existente
      </a>
    </div>

    <!-- Sección para ver órdenes -->
    <h3 class="text-2xl font-semibold mt-10 mb-4">Mis Ventas</h3>
    <table class="min-w-full divide-y divide-gray-200">
      <!-- Encabezado de la tabla -->
      <thead>
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Orden ID</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Comprador</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cantidad</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precio Total</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
          <th class="px-6 py-3"></th>
        </tr>
      </thead>
      <!-- Cuerpo de la tabla -->
      <tbody id="orders-table-body" class="bg-white divide-y divide-gray-200">
        {orders.map(order => (
          <tr>
            <td class="px-6 py-4">{order.orderId}</td>
            <td class="px-6 py-4">{order.buyerName}</td>
            <td class="px-6 py-4">{order.productName}</td>
            <td class="px-6 py-4">{order.quantity}</td>
            <td class="px-6 py-4">${order.total.toLocaleString('es-ES')}</td>
            <td class="px-6 py-4">{order.status}</td>
            <td class="px-6 py-4 text-right">
              {order.status !== 'Completado' && (
                <button
                  class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 focus:outline-none"
                  onclick={`completeOrder('${order.orderId}')`}
                >
                  Marcar como Completada
                </button>
              )}
            </td>
          </tr>
        ))}
      </tbody>
    </table>

    <!-- Enlaces de paginación para órdenes -->
    <div class="mt-4 flex justify-between">
      {ordersPage > 1 ? (
        <a href={`/seller/dashboard?productsPage=${productsPage}&ordersPage=${ordersPage - 1}`} class="text-blue-600 hover:text-blue-900">Anterior</a>
      ) : <span></span>}
      {orders.length === ORDERS_PER_PAGE ? (
        <a href={`/seller/dashboard?productsPage=${productsPage}&ordersPage=${ordersPage + 1}`} class="text-blue-600 hover:text-blue-900">Siguiente</a>
      ) : <span></span>}
    </div>

    <!-- Modal para ingresar el PIN -->
    <div id="pin-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
      <div class="bg-white p-6 rounded-md">
        <h3 class="text-xl font-semibold mb-4">Confirmar Entrega</h3>
        <input 
          type="text" 
          id="order-pin-input"
          placeholder="Ingrese el PIN de 4 dígitos"
          class="w-full px-4 py-2 border border-gray-300 rounded-md mb-4 focus:outline-none focus:ring-2 focus:ring-indigo-500 text-lg"
          maxlength="4"
        />
        <button id="confirm-pin-btn" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none">Confirmar</button>
        <button id="cancel-pin-btn" class="ml-2 px-4 py-2 bg-gray-300 text-black rounded-md hover:bg-gray-400 focus:outline-none">Cancelar</button>
      </div>
    </div>

    <!-- Script para manejar eventos -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const searchBtn = document.getElementById('search-btn');
        const searchOrderIdInput = document.getElementById('search-order-id');
        const ordersTableBody = document.getElementById('orders-table-body');
        const pinModal = document.getElementById('pin-modal');
        const orderPinInput = document.getElementById('order-pin-input');
        const confirmPinBtn = document.getElementById('confirm-pin-btn');
        const cancelPinBtn = document.getElementById('cancel-pin-btn');
        let currentOrderId = '';

        // Función para buscar órdenes por Order ID
        searchBtn.addEventListener('click', async () => {
          const orderId = searchOrderIdInput.value.trim();
          if (!orderId) {
            alert('Por favor, ingrese un Order ID.');
            return;
          }

          try {
            const response = await fetch(`/api/search-order`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ orderId }),
            });
            const data = await response.json();

            if (data.success) {
              // Limpiar la tabla
              ordersTableBody.innerHTML = '';

              // Agregar la orden encontrada
              const order = data.order;
              const row = document.createElement('tr');
              row.classList.add('text-center');

              row.innerHTML = `
                <td class="px-6 py-4 border-b">${order.orderId}</td>
                <td class="px-6 py-4 border-b">${order.userName}</td>
                <td class="px-6 py-4 border-b">${order.productName}</td>
                <td class="px-6 py-4 border-b">${order.quantity}</td>
                <td class="px-6 py-4 border-b">$${order.total.toLocaleString('es-ES')}</td>
                <td class="px-6 py-4 border-b">${order.status}</td>
                <td class="px-6 py-4 border-b text-right">
                  ${order.status !== 'Completado' ? `<button class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 focus:outline-none" onclick="completeOrder('${order.orderId}')">Marcar como Completada</button>` : ''}
                </td>
              `;

              ordersTableBody.appendChild(row);
            } else {
              alert(data.message || 'Orden no encontrada.');
            }
          } catch (error) {
            console.error('Error searching order:', error);
            alert('Hubo un error al buscar la orden.');
          }
        });

        // Función para abrir el modal de PIN
        window.completeOrder = function(orderId) {
          currentOrderId = orderId;
          pinModal.classList.remove('hidden');
          orderPinInput.value = '';
          orderPinInput.focus();
        };

        // Confirmar el PIN y completar la orden
        confirmPinBtn.addEventListener('click', async () => {
          const pin = orderPinInput.value.trim();
          if (pin.length !== 4 || isNaN(pin)) {
            alert('Por favor, ingrese un PIN válido de 4 dígitos.');
            return;
          }

          try {
            const response = await fetch(`/api/complete-order`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ orderId: currentOrderId, pin }),
            });
            const data = await response.json();

            if (data.success) {
              alert('Orden marcada como completada.');
              // Actualizar la interfaz, por ejemplo recargar las órdenes
              location.reload();
            } else {
              alert(data.message || 'Error al completar la orden.');
            }
          } catch (error) {
            console.error('Error completing order:', error);
            alert('Hubo un error al completar la orden.');
          }
        });

        // Cancelar el PIN
        cancelPinBtn.addEventListener('click', () => {
          pinModal.classList.add('hidden');
        });

        // Manejar el marcado de órdenes desde la tabla inicial
        const markAsCompletedButtons = document.querySelectorAll('.mark-as-completed');
        markAsCompletedButtons.forEach(button => {
          button.addEventListener('click', () => {
            const orderId = button.getAttribute('data-order-id');
            if (orderId) {
              completeOrder(orderId);
            }
          });
        });
      });
    </script>
</BaseLayout>
