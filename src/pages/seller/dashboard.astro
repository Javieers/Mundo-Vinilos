---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { adminAuth, adminFirestore } from '../../firebase/server';

const sessionCookie = Astro.cookies.get('session')?.value;

if (!sessionCookie) {
  return Astro.redirect('/login');
}

let user = null;
let sellerData = null;
let products = [];
let orders = [];

try {
  const decodedClaims = await adminAuth.verifySessionCookie(sessionCookie, true);

  if (decodedClaims.seller) {
    user = decodedClaims;
    const sellerId = user.uid;

    // Obtener datos del vendedor
    const sellerDoc = await adminFirestore.collection('sellers').doc(sellerId).get();

    if (sellerDoc.exists) {
      sellerData = sellerDoc.data();
    } else {
      // Si el vendedor no tiene documento, crearlo
      await adminFirestore.collection('sellers').doc(sellerId).set({
        sellerId,
        sellerName: user.email, // Puedes pedirle que actualice su perfil más adelante
      });
      sellerData = { sellerId, sellerName: user.email };
    }

    // Obtener productos del vendedor
    const sellerProductsSnapshot = await adminFirestore.collection('sellers').doc(sellerId).collection('products').get();
    const sellerProducts = sellerProductsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

    // Obtener la información completa de cada producto desde la colección principal "products"
    const productPromises = sellerProducts.map(async (sellerProduct) => {
      const productDoc = await adminFirestore.collection('products').doc(sellerProduct.id).get();
      if (productDoc.exists) {
        const productData = productDoc.data();
        return {
          ...sellerProduct,
          name: productData?.name ?? 'Sin nombre',
          artistName: productData?.artistName ?? 'Artista desconocido',
          description: productData?.description ?? 'Sin descripción',
          imageUrl: productData?.imageUrl ?? '/default-image.png',
        };
      } else {
        return {
          ...sellerProduct,
          name: 'Producto no disponible', // Si no se encuentra el producto en la colección principal
        };
      }
    });

    products = await Promise.all(productPromises);

    // Obtener órdenes del vendedor
    const ordersSnapshot = await adminFirestore.collection('orders').where('sellerId', '==', sellerId).get();
    orders = ordersSnapshot.docs.map(doc => doc.data());
  } else {
    return Astro.redirect('/no-autorizado');
  }
} catch (error) {
  console.error('Error al verificar la sesión:', error);
  return Astro.redirect('/login');
}
---

<BaseLayout>
  <!-- Interfaz del panel de control del vendedor -->
  <section class="max-w-7xl mx-auto p-6 bg-white mt-10 rounded-lg shadow-md">
    <h2 class="text-3xl font-bold mb-6">Panel de Vendedor</h2>
    <p class="text-gray-700 mb-8">Bienvenido, <span class="font-semibold">{sellerData.sellerName}</span></p>

    <!-- Sección para gestionar productos -->
    <h3 class="text-2xl font-semibold mb-4">Mis Productos</h3>
    <table class="min-w-full divide-y divide-gray-200 mb-8">
      <!-- Encabezado de la tabla -->
      <thead>
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precio</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
          <th class="px-6 py-3"></th>
        </tr>
      </thead>
      <!-- Cuerpo de la tabla -->
      <tbody class="bg-white divide-y divide-gray-200">
        {products.map(product => (
          <tr>
            <td class="px-6 py-4">{product.name}</td>
            <td class="px-6 py-4">${product.price}</td>
            <td class="px-6 py-4">{product.stock}</td>
            <td class="px-6 py-4 text-right">
              <a href={`/seller/edit-product/${product.id}`} class="text-blue-600 hover:text-blue-900">Editar</a>
            </td>
          </tr>
        ))}
      </tbody>
    </table>

    <!-- Enlace para agregar un nuevo producto -->
    <a href="/seller/add-new-product" class="block bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
      Agregar Nuevo Producto
    </a>
    <a href="/assignproduct" class="block bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600">
      Asignar Precio y Stock a Producto Existente
    </a>

    <!-- Sección para ver órdenes -->
    <h3 class="text-2xl font-semibold mt-10 mb-4">Mis Ventas</h3>
    <table class="min-w-full divide-y divide-gray-200">
      <!-- Encabezado de la tabla -->
      <thead>
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cantidad</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
          <th class="px-6 py-3"></th>
        </tr>
      </thead>
      <!-- Cuerpo de la tabla -->
      <tbody class="bg-white divide-y divide-gray-200">
        {orders.map(order => (
          <tr>
            <td class="px-6 py-4">{order.productName}</td>
            <td class="px-6 py-4">{order.quantity}</td>
            <td class="px-6 py-4">{order.date.toDate().toLocaleString()}</td>
            <td class="px-6 py-4 text-right">
              <!-- Opcionalmente, agregar acciones para gestionar la orden -->
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </section>
</BaseLayout>
