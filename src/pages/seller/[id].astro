---
import BaseLayout from "../../layouts/BaseLayout.astro"; // Verifica la ruta correcta
import { getSellerInfo, adminFirestore } from '../../firebase/server'; // Asegúrate de que el archivo sea el correcto
import { format } from 'date-fns'; // Librería para formatear fechas, instala si no la tienes
import Star from '../../components/Star.astro'; // Importar el componente Star

const { id } = Astro.params;

// Obtener los datos del vendedor
const sellerInfo = await getSellerInfo(id); // Debes implementar esta función en tu servidor

if (!sellerInfo) {
  throw new Error('Vendedor no encontrado');
}

const { seller, products } = sellerInfo;

// Obtener todas las reseñas del vendedor
const reviewsSnapshot = await adminFirestore.collection('reviews').where('sellerId', '==', id).get();

let reviews: {
  reviewText: string;
  rating: number;
  createdAt: any;
  userName: string;
  productName: string;
}[] = [];

let averageRating: number | null = null;

if (!reviewsSnapshot.empty) {
  const reviewDocs = reviewsSnapshot.docs;

  // Extraer los userIds y productIds únicos
  const userIds = Array.from(new Set(reviewDocs.map(doc => doc.data().userId)));
  const productIds = Array.from(new Set(reviewDocs.map(doc => doc.data().productId)));

  // Firestore permite un máximo de 10 elementos en una consulta 'in'
  // Si hay más de 10, necesitarás dividir las consultas
  const limitedUserIds = userIds.slice(0, 10);
  const limitedProductIds = productIds.slice(0, 10);

  // Obtener los usuarios
  const usersSnapshot = await adminFirestore.collection('users').where('__name__', 'in', limitedUserIds).get();
  const usersMap: { [key: string]: { firstName: string; lastName: string } } = {};
  usersSnapshot.forEach(doc => {
    const data = doc.data();
    usersMap[doc.id] = { firstName: data.firstName || '', lastName: data.lastName || '' };
  });

  // Obtener los productos
  const productsSnapshot = await adminFirestore.collection('products').where('__name__', 'in', limitedProductIds).get();
  const productsMap: { [key: string]: { name: string } } = {};
  productsSnapshot.forEach(doc => {
    const data = doc.data();
    productsMap[doc.id] = { name: data.name || 'Sin nombre' };
  });

  // Combinar la información
  reviews = reviewDocs.map(doc => {
    const data = doc.data();
    const user = usersMap[data.userId] || { firstName: 'Usuario', lastName: '' };
    const product = productsMap[data.productId] || { name: 'Producto no disponible' };
    return {
      reviewText: data.reviewText,
      rating: data.rating,
      createdAt: data.createdAt,
      userName: `${user.firstName} ${user.lastName}`,
      productName: product.name,
    };
  });

  // Calcular el promedio de calificaciones
  const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
  averageRating = parseFloat((totalRating / reviews.length).toFixed(2)); // Redondear a 2 decimales
}
---
<BaseLayout>
  <section>
    <div class="mx-auto w-full lg:px-24 max-w-7xl md:px-12 items-center px-8 py-24">
      <div class="bg-white p-8 rounded-lg shadow-lg">
        <!-- Cabecera del Perfil con Imagen e Información Básica -->
        <div class="flex flex-col lg:flex-row items-center gap-8">
          <!-- Imagen del Vendedor -->
          <img src={seller.sellerImage} alt={seller.storeName} class="w-full lg:w-1/3 h-auto object-cover rounded-lg shadow-md" />

          <!-- Información Básica -->
          <div class="lg:w-2/3">
            <h2 class="text-3xl font-bold mb-2">{seller.storeName}</h2>
            {/* Mostrar Calificación Promedio */}
            {averageRating !== null && (
              <div class="flex items-center mt-2 mb-4">
                <span class="text-lg font-semibold mr-2">{averageRating}/10</span>
                <Star filled={true} />
              </div>
            )}
            <p class="text-gray-700 mb-2"><strong>Dirección:</strong> {seller.direccion}</p>
            <p class="text-gray-700 mb-2"><strong>Región:</strong> {seller.region}</p>
            {seller.region === 'Región Metropolitana' && (
              <p class="text-gray-700 mb-2"><strong>Comuna:</strong> {seller.comuna}</p>
            )}
            {seller.redesSociales && (
              <p class="text-gray-700"><strong>Redes Sociales:</strong> {seller.redesSociales}</p>
            )}
          </div>
        </div>

        <!-- Horario de Atención -->
        <div class="mt-8">
          <h3 class="text-xl font-semibold mb-1">Horario de Atención</h3>
          <div class="text-gray-700">
            <p><strong>Desde:</strong> {seller.horarioAtencion.desde}</p>
            <p><strong>Hasta:</strong> {seller.horarioAtencion.hasta}</p>
          </div>
        </div>

        <!-- Separador -->
        <hr class="my-8 border-gray-300" />

        <!-- Productos Disponibles -->
        <div>
          <h3 class="text-2xl font-semibold mb-4">Productos Disponibles</h3>
          <ul class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {products && products.length > 0 ? (
              products.map(product => (
                <li class="border p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200">
                  {product.price !== undefined && typeof product.price === 'number' ? (
                    <p class="text-gray-700 mt-2">Precio: ${product.price.toLocaleString('es-ES')}</p>
                  ) : (
                    <p class="text-gray-700 mt-2">Precio: No disponible</p>
                  )}
                  <p class="text-gray-700">Stock: {product.stock > 0 ? product.stock : <span class="text-red-500">Agotado</span>}</p>
                  <a href={`/product/${product.productId}`} class="text-blue-600 hover:underline font-medium">{product.name}</a>
                </li>
              ))
            ) : (
              <p class="text-gray-500">Este vendedor no tiene productos disponibles.</p>
            )}
          </ul>
        </div>

        <!-- Separador -->
        <hr class="my-8 border-gray-300" />

        <!-- Reseñas -->
        <div>
          <h3 class="text-2xl font-semibold mb-4">Reseñas</h3>
          <div class="space-y-6">
            {reviews.length > 0 ? (
              reviews.map(review => (
                <div class="border-b pb-4">
                  <div class="flex items-center justify-between">
                    <h4 class="text-lg font-medium">{review.userName}</h4>
                    <span class="text-yellow-500 flex items-center">
                      <Star filled={true} />
                      <span class="ml-2">{review.rating}/10</span>
                    </span>
                  </div>
                  <p class="text-gray-700 mt-2">{review.reviewText}</p>
                  <p class="text-gray-500 text-sm mt-1">{format(review.createdAt.toDate(), 'dd/MM/yyyy')}</p>
                  <p class="text-gray-600 mt-1"><strong>Producto:</strong> {review.productName}</p>
                </div>
              ))
            ) : (
              <p class="text-gray-500">Este vendedor no tiene reseñas aún.</p>
            )}
          </div>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>
